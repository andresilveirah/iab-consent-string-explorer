{"version":3,"sources":["iAB/index.js","App.js","serviceWorker.js","index.js"],"names":["vendorListUrl","version","getVendorList","fetch","url","then","r","json","list","byId","arr","reduce","collection","element","id","Names","ids","String","map","name","join","DecodedConsentString","consentString","vendorList","useState","decodedString","setConsentString","decode","Object","keys","attr","i","key","style","backgroundColor","padding","value","vendorsById","purposesById","toDateString","getAttribute","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","meta","vendors","purposes","setVendorList","useEffect","fetchVendorList","vendorListVersion","lastUpdated","href","height","width","fontSize","onChange","e","target","placeholder","rel","document","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.04e68780.chunk.js","sourcesContent":["const proxied = (url) => `https://shrouded-island-73798.herokuapp.com/${url}`\n\nconst vendorListUrl = (version) => version ? \n  `https://vendorlist.consensu.org/v-${version}/vendorlist.json` :\n  `https://vendorlist.consensu.org/vendorlist.json`\n\nconst getVendorList = (version) => () => fetch(proxied(vendorListUrl(version))).then(r => r.json()).then(list => ({ ...list, url: vendorListUrl(version)}))\n\nconst byId = (arr) => arr.reduce((collection, element) => {\n  collection[element.id] = element\n  return collection\n}, {})\n\nexport default (version, fetchVendorList = getVendorList(version)) => fetchVendorList().then(list => ({\n  meta: {\n    url: list.url,\n    version: list.vendorListVersion,\n    lastUpdated: list.lastUpdated,\n  },\n  vendorsById: byId(list.vendors),\n  purposesById: byId(list.purposes)\n}))\n","import React, { useState, useEffect } from 'react'\nimport { decodeConsentString as decode } from 'consent-string'\n\nimport fetchVendorList from './iAB'\n\nconst Names = ({ ids, list }) => (\n  <span>\n    {String(ids)} - \n      <small>{\n        ids.map(id =>\n          list[id] ? list[id].name : '-'\n        ).join(',')}\n      </small>\n  </span>\n)\n\nconst getAttribute = (attr, value, vendorList) => {\n  switch (attr) {\n    case 'allowedVendorIds':\n      return <Names ids={value} list={vendorList.vendorsById} />\n    case 'allowedPurposeIds':\n      return <Names ids={value} list={vendorList.purposesById} />\n    case 'lastUpdated':\n    case 'created': \n      return value.toDateString()\n    default:\n      return String(value)\n  }\n}\n\nconst DecodedConsentString = ({ consentString, vendorList }) => {\n  const [decodedString, setConsentString] = useState({})\n  try { setConsentString(decode(consentString)) } catch {}\n\n  return (\n    <code>\n      <table>\n        <tbody>\n          {Object.keys(decodedString).map((attr, i) => (\n            <tr\n              key={i}\n              style={{ \n                backgroundColor: i % 2 ? '#ddd':'#eee'\n              }}>\n              <td style={{ padding: 15 }}>{attr}</td>\n              <td style={{ padding: 15 }}>\n                {getAttribute(attr, decodedString[attr] || [], vendorList)}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </code>\n  )\n}\n\nexport default () => {\n  const [consentString, setConsentString] = useState('')\n  const [vendorList, setVendorList] = useState({ meta: {}, vendors: [], purposes: [] })\n  useEffect(() => { fetchVendorList().then(setVendorList) }, []);\n  \n  return (\n    <div>\n      <header style={{ \n        padding: \"10px 0\"\n      }}>\n        <a href=\"/\">CONSENT STRING EXPLORER</a>\n      </header>\n      <main>\n        <section>\n          <input\n            style={{\n              height: 30,\n              width: '100%',\n              fontSize: '1.5em'\n            }} \n            value={consentString}\n            onChange={e => setConsentString(e.target.value)} placeholder=\"Consent String...\"\n          />\n        </section>\n        <section\n          style={{\n            padding: '10px 0'\n          }}\n        >\n          <p>Decoded String</p>\n          <DecodedConsentString consentString={consentString} vendorList={vendorList} />\n        </section>\n        <footer>\n          <small>\n            Vendors List version <a href={vendorList.meta.url} target=\"_blank\" rel='noopener noreferrer'><i>{vendorList.meta.version}</i></a> last updated <i>{vendorList.meta.lastUpdated}</i>\n          </small>\n        </footer>\n        <p>BOq5iXTOq5iXTAGABBENCx-AAAAs6ADABUADQAUg</p>\n      </main>\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}