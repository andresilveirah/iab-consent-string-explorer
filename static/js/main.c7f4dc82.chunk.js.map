{"version":3,"sources":["iAB/index.js","App.js","serviceWorker.js","index.js"],"names":["getVendorList","version","fetch","vendorListUrl","mode","then","r","json","iAB","fetchVendorList","this","vendorList","vendorListVersion","lastUpdated","vendors","purposes","DecodedConsentString","consentString","useState","decodedString","setConsentString","decode","Object","keys","map","attr","i","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","meta","setVendorList","href","value","onChange","e","target","placeholder","document","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c7f4dc82.chunk.js","sourcesContent":["const vendorListUrl = (version) => version ? \n  `https://vendorlist.consensu.org/v-${version}/vendorlist.json` :\n  `https://vendorlist.consensu.org/vendorlist.json`\n\nconst getVendorList = (version) => () => fetch(vendorListUrl(version), { mode: 'cors' }).then(r => r.json())\n\nexport default class iAB {\n  constructor(version, fetchVendorList = getVendorList(version) ) {\n    this.fetchVendorList = fetchVendorList\n  }\n\n  get vendorList() {\n    return this.fetchVendorList()\n  }\n\n  get meta() {\n    return this.vendorList.then(({ vendorListVersion, lastUpdated }) => ({ \n      version: vendorListVersion,\n      lastUpdated: lastUpdated\n    }))\n  }\n\n  get vendors() {\n    return this.vendorList.then(({ vendors }) => vendors)\n  }\n\n  get purposes() {\n    return this.vendorList.then(({ purposes }) => purposes)\n  }\n}","import React, { useState } from 'react'\nimport { decodeConsentString as decode } from 'consent-string'\n\nimport iAB from './iAB'\n\nconst DecodedConsentString = ({ consentString }) => {\n  const [decodedString, setConsentString] = useState({})\n  try { setConsentString(decode(consentString)) } catch {}\n  return (\n    <code>\n      <table>\n        <tbody>\n          {Object.keys(decodedString).map((attr, i) => (\n            <tr key={i}>\n              <td>{attr}</td>\n              <td>{`${decodedString[attr] || '<i>test</i>'}`}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </code>\n  )\n}\n\nexport default () => {\n  const [consentString, setConsentString] = useState('BOq2z-OOq2z-OAGABBENCw-AAAAsyADABUADQAUg')\n  const [vendorList, setVendorList] = useState({ meta: {}, vendors: [], purposes: [] })\n  new iAB().vendorList.then(setVendorList)\n  return (\n    <div>\n      <header>\n        <a href=\"/\">CONSENT STRING EXPLORER</a>\n      </header>\n      <main>\n        <section>\n          <input value={consentString} onChange={e => setConsentString(e.target.value)} placeholder=\"Consent String...\" />\n        </section>\n        <section>\n          <p>Decoded String</p>\n          <DecodedConsentString {...{consentString}} />\n        </section>\n        <footer>\n          <small>\n            Vendors List version <a href=\"/\" target=\"_blank\"><i>{vendorList.meta.version}</i></a> last updated <i>{vendorList.meta.lastUpdated}</i>\n          </small>\n        </footer>\n      </main>\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}